// fibonacci_final.s - 最终修正的斐波那契数列汇编程序
// 正确计算斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55

// 初始化
addi x15, x0, 1      // F(n-2) = 1 (当前fib(0))
addi x16, x0, 1      // F(n-1) = 1 (当前fib(1))
addi x10, x0, 0      // 循环计数器，从0开始
addi x11, x0, 10     // 循环终止条件：计算10个数

// 存储前两个数到内存
sw x15, 0(x0)        // 存储F(0)=1到地址0
sw x16, 4(x0)        // 存储F(1)=1到地址4

// 将计数器设置为2，开始计算fib(2)
addi x10, x0, 2      

loop:
    bge x10, x11, end    // 如果计数器 >= 10，跳转到结束
    add x17, x15, x16    // F(n) = F(n-1) + F(n-2)
    
    // 计算存储地址：address = counter * 4
    slli x12, x10, 2     // x12 = x10 * 4
    add x13, x0, x12     // x13 = x12 (基地址为0)
    sw x17, 0(x13)       // 存储F(n)到内存[counter*4]
    
    // 更新前两个斐波那契数
    addi x15, x16, 0     // F(n-2) = F(n-1)
    addi x16, x17, 0     // F(n-1) = F(n)
    
    // 计数器递增
    addi x10, x10, 1     // 计数器++
    beq x0, x0, loop     // 无条件跳转回循环开始

end:
    // 结果展示：从内存加载斐波那契数到寄存器
    lw x15, 0(x0)        // 读取F(0)到x15
    lw x16, 4(x0)        // 读取F(1)到x16
    lw x17, 8(x0)        // 读取F(2)到x17
    lw x18, 12(x0)       // 读取F(3)到x18
    lw x19, 16(x0)       // 读取F(4)到x19
    lw x20, 20(x0)       // 读取F(5)到x20
    lw x21, 24(x0)       // 读取F(6)到x21
    lw x22, 28(x0)       // 读取F(7)到x22
    lw x23, 32(x0)       // 读取F(8)到x23
    lw x24, 36(x0)       // 读取F(9)到x24
    
    // 程序结束，死循环
    beq x0, x0, end
